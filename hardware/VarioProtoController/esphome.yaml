esphome:
  name: varioprotocontrol
  friendly_name: VarioProtoControl

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "VarioProtoControl"
    password: !secret ap_password

# Enable captive portal
captive_portal:

# Enable web server
#web_server:
#  port: 80
#  version: 2


# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key
#  services:
#    - service: set_pumpe_sollwert_percent
#      variables:
#        percentage: int
#      then:
#        - lambda: |-
#            id(pump_percent) = percentage;
#            id(pump_percent_sensor).publish_state(percentage);

# Configuration for DFRobot FireBeetle 2 ESP32-E
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

ads1115:
  - address: 0x48

gp8403:
  id: DFR0971
  voltage: 10V


number:
  - platform: template
    id: pump_power_number
    name: "Pumpenleistung"
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    on_value:
      then:
        - lambda: |-
            id(pump_percent) = x;
            id(pump_percent_sensor).publish_state(x);

globals:
   - id: pump_percent
     type: float
     initial_value: '0'  # 0..100

sensor:
  - platform: ads1115
    id: ads1115_ch0_raw
    multiplexer: 'A0_GND'
    gain: 4.096
    filters:
    - multiply: 3.09324980380745
    update_interval: 10s
    name: "ADS1115 A0-GND"
  - platform: template
    name: "Pumpe Sollwert Sensor"
    id: pump_percent_sensor
    lambda: 'return id(pump_percent);'
    update_interval: 10s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: "mdi:pulse"
    on_value:
      then:
        - lambda: |-
            id(pump_voltage).set_level(x/100);
  - platform: uptime
    name: Uptime Sensor

output:
  - platform: gpio
    pin: GPIO16
    id: gpio_16
  - platform: gp8403
    id: pump_voltage
    gp8403_id: DFR0971
    channel: 0

button:
  - platform: template
    name: "Pumpenleistung +5%"
    on_press:
      - lambda: |-
          id(pump_percent) += 5;
          if (id(pump_percent) > 100) id(pump_percent) = 100;
          id(pump_voltage).set_level(id(pump_percent)/100);
          id(pump_power_number).publish_state(id(pump_percent));
  - platform: template
    name: "Pumpenleistung -5%"
    on_press:
      - lambda: |-
          id(pump_percent) -= 5;
          if (id(pump_percent) < 0) id(pump_percent) = 0;
          id(pump_voltage).set_level(id(pump_percent)/100);
          id(pump_power_number).publish_state(id(pump_percent));
  - platform: template
    name: "Pumpe Aus"
    on_press:
      - lambda: |-
          id(pump_percent) = 0;
          id(pump_voltage).set_level(0);
          id(pump_power_number).publish_state(0);

# Onboard RGB-LED
light:
  - platform: status_led
    name: "State"
    pin: GPIO2
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO5
    num_leds: 1
    name: "NeoPixel Light"
