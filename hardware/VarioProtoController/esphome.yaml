esphome:
  name: varioprotocontrol
  friendly_name: VarioProtoControl

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "xxxxxx"
  services:
    - service: set_pumpe_sollwert_percent
      variables:
        percentage: int
      then:
        - lambda: |-
            id(pump_rpm) = percentage;
            id(pumpe_sollwert_sensor).publish_state(percentage);

ota:
  password: "xxxxxx"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Varioprotocontrol"
    password: "xxxxxx"

captive_portal:


# Example configuration entry for ESP32
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

ads1115:
  - address: 0x48

gp8403:
  id: DFR0971
  voltage: 5V

sensor:
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 6.144
    name: "ADS1115 Channel A0-GND"
  - platform: template
    name: "Pump Test Template Sensor"
    id: pump_set_value_sensor
    lambda: 'return id(pump_rpm);'
    update_interval: 10s
  - platform: template
    name: "Pumpe Sollwert Sensor (Voltage)"
    id: pumpe_sollwert_sensor
    lambda: 'return id(pump_rpm);'
    update_interval: 10s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: "mdi:pulse"
    on_value:
      then:
        - lambda: |-
            id(pump_voltage).set_level(x/10);

number:
  - platform: template
    name: "Template number"
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    on_value:
      then:
        - lambda: |-
            id(pump_rpm) = x;
            id(pumpe_sollwert_sensor).publish_state(x);

globals:
   - id: pump_rpm
     type: float
     initial_value: '0'  # 0..100

output:
  - platform: gpio
    pin: GPIO16
    id: gpio_16
  - platform: gp8403
    id: pump_voltage
    gp8403_id: DFR0971
    channel: 0

switch:
  - platform: template
    name: "Pump Test Template Switch +1"
    lambda: 'return false;'
    turn_on_action:
      - lambda: |-
          id(pump_rpm) += 1;
          if (id(pump_rpm) > 10) id(pump_rpm) = 10;
          id(pump_voltage).set_level(id(pump_rpm)/10);
          id(pump_set_value_sensor).publish_state(id(pump_rpm));

button:
  - platform: template
    name: "Pumpe Aus Button"
    on_press:
      - lambda: |-
          id(pump_rpm) = 0;
          id(pump_voltage).set_level(0);
          id(pump_set_value_sensor).publish_state(0);

# Onboard RGB-LED
light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO5
    num_leds: 1
    name: "NeoPixel Light"
